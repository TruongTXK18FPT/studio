"use client";

import { useEffect, useState, useRef } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { 
  MapPin, 
  CheckCircle, 
  XCircle, 
  Trophy,
  Globe,
  Sparkles,
  Star,
  Award,
  Info
} from "lucide-react";

interface Country {
  id: number;
  name: string;
  flag: string;
  year: string;
  question: string;
  options: string[];
  correctAnswer: string;
}

export default function WorldMapGame() {
  const [countries, setCountries] = useState<Country[]>([]);
  const [selected, setSelected] = useState<Country | null>(null);
  const [answered, setAnswered] = useState<Record<string, boolean>>({});
  const [showPopup, setShowPopup] = useState(false);
  const [showResult, setShowResult] = useState<"correct" | "wrong" | null>(null);
  const [score, setScore] = useState(0);
  const [showVictory, setShowVictory] = useState(false);
  const [svgLoaded, setSvgLoaded] = useState(false);
  const svgRef = useRef<HTMLObjectElement>(null);

  useEffect(() => {
    fetch("/data/countries.json")
      .then((res) => res.json())
      .then((data) => {
        setCountries(data);
        console.log("Countries loaded:", data.length);
      })
      .catch((err) => console.error("Failed to load countries:", err));
  }, []);

  useEffect(() => {
    const handleSvgLoad = () => {
      console.log("SVG loading...");
      const svgDoc = svgRef.current?.contentDocument;
      if (!svgDoc) {
        console.error("SVG document not found");
        return;
      }

      setSvgLoaded(true);
      console.log("SVG loaded successfully!");

      const paths = svgDoc.querySelectorAll("path[id]");
      console.log("Found", paths.length, "paths in SVG");
      
      paths.forEach((path) => {
        const element = path as SVGPathElement;
        const pathId = element.id.toLowerCase().replace(/\s+/g, "");
        
        // Check if this country is in our list
        const isTargetCountry = countries.some(
          (c) => c.name.toLowerCase().replace(/\s+/g, "") === pathId
        );
        
        // Add country class for styling
        element.classList.add("country");
        
        // Highlight countries that Bac Ho visited
        if (isTargetCountry) {
          console.log("Found target country:", pathId);
          element.style.cursor = "pointer";
          element.style.transition = "all 0.3s ease";
          element.style.stroke = "#ff6b00";
          element.style.strokeWidth = "2";
          
          // Check if already answered
          if (answered[pathId]) {
            element.style.fill = "#00FF88";
          } else {
            element.style.fill = "#ffd700"; // Gold color for available countries
          }
          
          // Add click handler
          element.addEventListener("click", () => handleCountryClick(pathId));
          
          // Hover effect
          element.addEventListener("mouseenter", () => {
            if (!answered[pathId]) {
              element.style.fill = "#ffcc00";
              element.style.strokeWidth = "3";
              element.style.filter = "drop-shadow(0 0 8px rgba(255, 204, 0, 0.6))";
            }
          });
          
          element.addEventListener("mouseleave", () => {
            if (!answered[pathId]) {
              element.style.fill = "#ffd700";
              element.style.strokeWidth = "2";
              element.style.filter = "none";
            } else if (answered[pathId] === true) {
              element.style.fill = "#00FF88";
            }
          });
        } else {
          // Non-target countries
          element.style.fill = "#e0e0e0";
          element.style.cursor = "default";
          element.style.transition = "fill 0.2s ease";
        }
      });
    };

    if (svgRef.current && countries.length > 0) {
      svgRef.current.addEventListener("load", handleSvgLoad);
      // Try to load immediately if already loaded
      if (svgRef.current.contentDocument) {
        handleSvgLoad();
      }
    }

    return () => {
      if (svgRef.current) {
        svgRef.current.removeEventListener("load", handleSvgLoad);
      }
    };
  }, [countries, answered]);

  const handleCountryClick = (id: string) => {
    const normalizedId = id.toLowerCase().replace(/\s+/g, "");
    
    const country = countries.find(
      (c) => c.name.toLowerCase().replace(/\s+/g, "") === normalizedId
    );
    
    if (country && !answered[normalizedId]) {
      setSelected(country);
      setShowPopup(true);
      setShowResult(null);
    }
  };

  const handleAnswer = (option: string) => {
    if (!selected) return;

    const normalizedId = selected.name.toLowerCase().replace(/\s+/g, "");
    const correct = option === selected.correctAnswer;
    
    setShowResult(correct ? "correct" : "wrong");
    
    setTimeout(() => {
      setAnswered((prev) => ({ ...prev, [normalizedId]: correct }));

      if (correct) {
        setScore((prev) => prev + 1);
        
        // Change color on map
        const svgDoc = svgRef.current?.contentDocument;
        if (svgDoc) {
          const element = svgDoc.getElementById(normalizedId);
          if (element && element instanceof SVGPathElement) {
            element.style.fill = "#00FF88";
          }
        }
        
        // Check victory
        if (Object.keys(answered).length + 1 === countries.length) {
          setTimeout(() => {
            setShowVictory(true);
          }, 1000);
        }
      }

      setTimeout(() => {
        setShowPopup(false);
        setShowResult(null);
      }, 1500);
    }, 1000);
  };

  const completedCount = Object.keys(answered).length;
  const progress = countries.length > 0 ? (completedCount / countries.length) * 100 : 0;

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 via-yellow-50 to-orange-50 relative overflow-hidden">
      {/* Animated background decorations */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-10 left-10 w-32 h-32 bg-red-200/30 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-10 right-10 w-48 h-48 bg-yellow-200/30 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 w-64 h-64 bg-orange-200/20 rounded-full blur-3xl animate-pulse delay-500"></div>
      </div>

      <div className="container mx-auto px-4 py-8 relative z-10">
        {/* Header */}
        <div className="text-center mb-8 animate-fadeIn">
          <div className="inline-flex items-center justify-center w-24 h-24 bg-gradient-to-br from-red-600 via-red-500 to-orange-600 rounded-3xl shadow-2xl mb-6 transform hover:scale-105 transition-transform">
            <Globe className="w-12 h-12 text-white animate-spin-slow" />
          </div>
          <h1 className="text-6xl font-bold bg-gradient-to-r from-red-600 via-orange-600 to-yellow-600 bg-clip-text text-transparent mb-4 font-[Poppins] drop-shadow-sm">
            üó∫Ô∏è H√†nh Tr√¨nh Theo Ch√¢n B√°c H·ªì
          </h1>
          <p className="text-xl text-gray-700 max-w-3xl mx-auto leading-relaxed">
            Kh√°m ph√° <span className="font-bold text-red-600">30 qu·ªëc gia</span> m√† B√°c H·ªì t·ª´ng ƒëi qua trong h√†nh tr√¨nh vƒ© ƒë·∫°i t√¨m ƒë∆∞·ªùng c·ª©u n∆∞·ªõc
          </p>
          <div className="flex justify-center gap-3 mt-4">
            <Badge className="bg-gradient-to-r from-red-600 to-orange-600 text-white px-4 py-2 text-sm shadow-lg">
              <Star className="w-4 h-4 mr-1 inline" />
              NƒÉm 1911-1945
            </Badge>
            <Badge className="bg-gradient-to-r from-yellow-600 to-orange-600 text-white px-4 py-2 text-sm shadow-lg">
              <Sparkles className="w-4 h-4 mr-1 inline" />
              30 Qu·ªëc gia
            </Badge>
          </div>
        </div>

        {/* Progress Card */}
        <Card className="max-w-5xl mx-auto mb-8 border-2 border-red-300 bg-white/95 backdrop-blur-sm shadow-2xl animate-fadeIn">
          <CardHeader className="bg-gradient-to-r from-red-50 to-orange-50">
            <CardTitle className="flex items-center justify-between flex-wrap gap-3">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-gradient-to-br from-yellow-500 to-yellow-600 rounded-xl">
                  <Trophy className="w-6 h-6 text-white" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-gray-800">Ti·∫øn ƒë·ªô h√†nh tr√¨nh</div>
                  <div className="text-sm text-gray-600 font-normal">Ho√†n th√†nh t·∫•t c·∫£ ƒë·ªÉ nh·∫≠n k·ª∑ ni·ªám ch∆∞∆°ng</div>
                </div>
              </div>
              <Badge className="bg-gradient-to-r from-red-600 to-orange-600 text-white text-2xl px-6 py-2 shadow-lg">
                {completedCount}/{countries.length}
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="space-y-4">
              <div className="relative">
                <Progress value={progress} className="h-6 bg-red-100" />
                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-xs font-bold text-gray-700">{progress.toFixed(0)}%</span>
                </div>
              </div>
              <div className="flex justify-between items-center text-base">
                <div className="flex items-center gap-2">
                  <Award className="w-5 h-5 text-red-600" />
                  <span className="font-semibold text-gray-700">ƒêi·ªÉm s·ªë: <span className="text-red-600">{score}</span></span>
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-5 h-5 text-green-600" />
                  <span className="font-semibold text-gray-700">{completedCount} qu·ªëc gia ƒë√£ kh√°m ph√°</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Map Container */}
        <Card className="max-w-7xl mx-auto border-2 border-red-300 bg-white/95 backdrop-blur-sm shadow-2xl overflow-hidden animate-fadeIn">
          <CardContent className="p-4">
            <div className="relative w-full rounded-xl overflow-auto bg-gradient-to-br from-blue-50 to-cyan-50" style={{ height: "600px" }}>
              {!svgLoaded && (
                <div className="absolute inset-0 flex items-center justify-center bg-gray-100 z-10">
                  <div className="text-center">
                    <div className="w-16 h-16 border-4 border-red-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
                    <p className="text-gray-600 font-medium">ƒêang t·∫£i b·∫£n ƒë·ªì th·∫ø gi·ªõi...</p>
                  </div>
                </div>
              )}
              
              <object
                ref={svgRef}
                data="/world-map.svg"
                type="image/svg+xml"
                className="w-full min-w-[1200px]"
                style={{ height: "auto" }}
                aria-label="Interactive World Map"
              >
                <div className="flex items-center justify-center h-full">
                  <div className="text-center">
                    <XCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
                    <p className="text-gray-700 font-medium">Kh√¥ng th·ªÉ t·∫£i b·∫£n ƒë·ªì</p>
                    <p className="text-gray-500 text-sm">Vui l√≤ng ki·ªÉm tra file /public/world-map.svg</p>
                  </div>
                </div>
              </object>
              
              {/* Hint box */}
              <div className="absolute top-4 left-4 bg-white/95 backdrop-blur rounded-2xl p-4 shadow-xl border-2 border-red-200 max-w-xs z-20">
                <div className="flex items-start gap-3">
                  <div className="p-2 bg-red-100 rounded-lg">
                    <Info className="w-5 h-5 text-red-600" />
                  </div>
                  <div>
                    <p className="font-semibold text-gray-800 mb-1">H∆∞·ªõng d·∫´n</p>
                    <p className="text-sm text-gray-600">
                      <MapPin className="w-4 h-4 text-red-600 inline mr-1" />
                      Click v√†o qu·ªëc gia <span className="font-semibold text-yellow-600">m√†u v√†ng</span> ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi l·ªãch s·ª≠
                    </p>
                    <p className="text-xs text-gray-500 mt-2">
                      üí° Cu·ªôn ƒë·ªÉ xem to√†n b·ªô b·∫£n ƒë·ªì
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Stats overlay */}
              <div className="absolute top-4 right-4 bg-gradient-to-br from-red-600 via-red-500 to-orange-600 text-white rounded-2xl p-6 shadow-2xl border-2 border-white/20 z-20">
                <div className="text-center">
                  <div className="text-4xl font-bold mb-1">{completedCount}/{countries.length}</div>
                  <div className="text-sm opacity-90 font-medium">ƒê√£ ho√†n th√†nh</div>
                  <div className="mt-3 pt-3 border-t border-white/30">
                    <div className="text-2xl font-bold">{score}</div>
                    <div className="text-xs opacity-90">ƒêi·ªÉm</div>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Legend */}
        <div className="max-w-5xl mx-auto mt-8 bg-white/95 backdrop-blur-sm rounded-2xl p-6 shadow-xl border-2 border-red-200">
          <div className="flex flex-wrap justify-center gap-6">
            <div className="flex items-center gap-3">
              <div className="w-10 h-8 bg-[#e0e0e0] border-2 border-gray-400 rounded-lg shadow-sm"></div>
              <span className="text-base font-medium text-gray-700">Qu·ªëc gia kh√°c</span>
            </div>
            <div className="flex items-center gap-3">
              <div className="w-10 h-8 bg-[#ffd700] border-2 border-[#ff6b00] rounded-lg shadow-sm"></div>
              <span className="text-base font-medium text-gray-700">B√°c ƒë√£ ƒëi qua (ch∆∞a tr·∫£ l·ªùi)</span>
            </div>
            <div className="flex items-center gap-3">
              <div className="w-10 h-8 bg-[#00FF88] border-2 border-[#00cc66] rounded-lg shadow-sm"></div>
              <span className="text-base font-medium text-gray-700">ƒê√£ ho√†n th√†nh</span>
            </div>
          </div>
        </div>

        {/* Countries List */}
        <Card className="max-w-7xl mx-auto mt-8 border-2 border-red-300 bg-white/95 backdrop-blur-sm shadow-2xl animate-fadeIn">
          <CardHeader className="bg-gradient-to-r from-red-50 to-orange-50">
            <CardTitle className="flex items-center gap-3 text-2xl">
              <div className="p-2 bg-gradient-to-br from-red-600 to-orange-600 rounded-xl">
                <Globe className="w-6 h-6 text-white" />
              </div>
              <div>
                <div className="font-bold text-gray-800">30 Qu·ªëc gia trong h√†nh tr√¨nh c·ªßa B√°c H·ªì</div>
                <div className="text-sm text-gray-600 font-normal">Click v√†o qu·ªëc gia ƒë·ªÉ xem v√† tr·∫£ l·ªùi c√¢u h·ªèi</div>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
              {countries.map((country) => {
                const normalizedId = country.name.toLowerCase().replace(/\s+/g, "");
                const isCompleted = answered[normalizedId];
                
                return (
                  <button
                    key={country.id}
                    onClick={() => {
                      if (!isCompleted) {
                        setSelected(country);
                        setShowPopup(true);
                        setShowResult(null);
                      }
                    }}
                    disabled={isCompleted}
                    className={`
                      p-4 rounded-xl border-2 transition-all text-left shadow-md
                      ${isCompleted 
                        ? "bg-gradient-to-br from-green-50 to-emerald-50 border-green-400 cursor-default" 
                        : "bg-gradient-to-br from-yellow-50 to-orange-50 border-orange-400 hover:from-orange-100 hover:to-yellow-100 hover:scale-105 hover:shadow-xl cursor-pointer"
                      }
                    `}
                  >
                    <div className="flex items-center gap-2 mb-2">
                      <span className="text-3xl">{country.flag}</span>
                      {isCompleted && <CheckCircle className="w-5 h-5 text-green-600" />}
                    </div>
                    <div className="font-semibold text-sm text-gray-800 mb-1">{country.name}</div>
                    <div className="text-xs text-gray-600 font-medium">üìÖ {country.year}</div>
                  </button>
                );
              })}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Question Popup */}
      {showPopup && selected && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/60 z-50 p-4">
          <div className="bg-white rounded-3xl shadow-2xl w-full max-w-2xl animate-fadeIn">
            <div className="bg-gradient-to-r from-red-600 to-orange-600 text-white p-6 rounded-t-3xl">
              <h2 className="text-3xl font-bold mb-2 flex items-center gap-3">
                <span className="text-5xl">{selected.flag}</span>
                <div>
                  <div>{selected.name}</div>
                  <div className="text-sm font-normal opacity-90">{selected.year}</div>
                </div>
              </h2>
            </div>
            
            <div className="p-8">
              <p className="text-xl font-semibold text-gray-800 mb-6">
                {selected.question}
              </p>
              
              <div className="grid gap-3">
                {selected.options.map((opt, i) => (
                  <button
                    key={i}
                    onClick={() => handleAnswer(opt)}
                    disabled={showResult !== null}
                    className={`
                      py-4 px-6 rounded-xl font-medium transition-all text-left
                      ${showResult === null 
                        ? "bg-blue-500 hover:bg-blue-600 text-white hover:scale-[1.02] active:scale-[0.98]" 
                        : showResult === "correct" && opt === selected.correctAnswer
                        ? "bg-green-500 text-white scale-[1.02]"
                        : showResult === "wrong" && opt === selected.correctAnswer
                        ? "bg-green-500 text-white"
                        : "bg-gray-200 text-gray-500 cursor-not-allowed"
                      }
                    `}
                  >
                    <div className="flex items-center justify-between">
                      <span>{opt}</span>
                      {showResult !== null && opt === selected.correctAnswer && (
                        <CheckCircle className="w-6 h-6" />
                      )}
                    </div>
                  </button>
                ))}
              </div>

              {showResult && (
                <div className={`
                  mt-6 p-4 rounded-xl flex items-center gap-3 font-semibold text-lg
                  ${showResult === "correct" 
                    ? "bg-green-100 text-green-800" 
                    : "bg-red-100 text-red-800"}
                `}>
                  {showResult === "correct" ? (
                    <>
                      <CheckCircle className="w-6 h-6" />
                      <span>Ch√≠nh x√°c! Tuy·ªát v·ªùi! üéâ</span>
                    </>
                  ) : (
                    <>
                      <XCircle className="w-6 h-6" />
                      <span>Ch∆∞a ƒë√∫ng. H√£y th·ª≠ l·∫°i nh√©!</span>
                    </>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Victory Modal */}
      {showVictory && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/70 z-50 p-4">
          <div className="bg-white rounded-3xl shadow-2xl w-full max-w-lg animate-fadeIn text-center p-12">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full mb-6 animate-bounce">
              <Trophy className="w-12 h-12 text-white" />
            </div>
            
            <h2 className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-red-600 to-orange-600 mb-4">
              Ch√∫c m·ª´ng! üéä
            </h2>
            
            <p className="text-xl text-gray-700 mb-6">
              B·∫°n ƒë√£ ho√†n th√†nh h√†nh tr√¨nh theo ch√¢n B√°c H·ªì!
            </p>
            
            <div className="bg-gradient-to-r from-red-50 to-orange-50 rounded-2xl p-6 mb-6">
              <div className="text-5xl font-bold text-red-600 mb-2">{score}/{countries.length}</div>
              <div className="text-gray-600">c√¢u tr·∫£ l·ªùi ƒë√∫ng</div>
            </div>
            
            <Button 
              onClick={() => window.location.reload()}
              className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white px-8 py-6 text-lg rounded-xl"
            >
              <Sparkles className="w-5 h-5 mr-2" />
              Ch∆°i l·∫°i
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}
